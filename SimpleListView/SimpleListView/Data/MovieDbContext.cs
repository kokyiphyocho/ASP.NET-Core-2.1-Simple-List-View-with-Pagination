using Microsoft.EntityFrameworkCore;
using Newtonsoft.Json;
using SimpleListView.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SimpleListView.Data
{
    public class MovieDbContext : DbContext
    {
        public MovieDbContext(DbContextOptions<MovieDbContext> options) : base(options) { }

        public DbSet<Movie> Movies { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            String movieListBase64JSON = "";

            String movieListJSONString = Encoding.UTF8.GetString(Convert.FromBase64String(movieListBase64JSON));

            modelBuilder.Entity<Movie>().HasData(JsonConvert.DeserializeObject<Movie[]>(movieListJSONString));
        }
    }
}
